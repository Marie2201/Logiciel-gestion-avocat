"""email OTP: ip+device

Revision ID: 2c4fbcf60622
Revises: e94ea9568fd1
Create Date: 2025-09-03 22:11:24.859866

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2c4fbcf60622'
down_revision = 'e94ea9568fd1'
branch_labels = None
depends_on = None

def _col_info(table, col):
    conn = op.get_bind()
    row = conn.execute(sa.text("""
        SELECT DATA_TYPE AS dt, CHARACTER_MAXIMUM_LENGTH AS clen
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME = :t AND COLUMN_NAME = :c
    """), {"t": table, "c": col}).mappings().first()
    return (row["dt"], row["clen"]) if row else (None, None)

def _unique_exists(name):
    conn = op.get_bind()
    return conn.execute(sa.text("""
        SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME='dossier'
          AND CONSTRAINT_TYPE='UNIQUE'
          AND CONSTRAINT_NAME=:n
    """), {"n": name}).scalar() > 0

def _drop_index_if_exists(name):
    conn = op.get_bind()
    exists = conn.execute(sa.text("""
        SELECT COUNT(*) FROM INFORMATION_SCHEMA.STATISTICS
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME='dossier'
          AND INDEX_NAME=:n
    """), {"n": name}).scalar() > 0
    if exists:
        op.drop_index(name, table_name='dossier')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
   
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_login_ip', sa.String(length=45), nullable=True))
        batch_op.add_column(sa.Column('last_device_fp', sa.String(length=64), nullable=True))

    # ### end Alembic commands ###
    _drop_index_if_exists('uq_dossier_client_numero_procedure')

    # 1) Assurer un type indexable pour dossier.procedures
    dt, clen = _col_info('dossier', 'procedures')
    if dt in ('text', 'mediumtext', 'longtext') or (dt == 'varchar' and (not clen or clen > 191)):
        # alter_column marche souvent; sinon, fallback SQL brut
        try:
            op.alter_column('dossier', 'procedures',
                            existing_type=sa.Text() if dt != 'varchar' else sa.String(length=clen or 255),
                            type_=sa.String(length=191),
                            existing_nullable=True)
        except Exception:
            op.execute(sa.text("ALTER TABLE dossier MODIFY procedures VARCHAR(191) NULL"))

    # 2) Créer la contrainte UNIQUE si absente
    if not _unique_exists('uq_dossier_client_numero_procedure'):
        op.create_unique_constraint(
            'uq_dossier_client_numero_procedure',
            'dossier',
            ['client_id', 'numero', 'procedures']
        )

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.drop_constraint('uq_dossier_client_numero_procedure', 'dossier', type_='unique')
    except Exception:
        pass
    # Revenir à TEXT si nécessaire (optionnel)
    try:
        op.alter_column('dossier', 'procedures',
                        existing_type=sa.String(length=191),
                        type_=sa.Text(),
                        existing_nullable=True)
    except Exception:
        pass
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('last_device_fp')
        batch_op.drop_column('last_login_ip')

    with op.batch_alter_table('dossier', schema=None) as batch_op:
        batch_op.drop_constraint('uq_dossier_client_numero_procedure', type_='unique')

    # ### end Alembic commands ###
